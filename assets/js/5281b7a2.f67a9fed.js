"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[443],{5874:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"architecture","title":"Architecture","description":"This page outlines the architecture and components of switchmap-ng","source":"@site/docs/architecture.md","sourceDirName":".","slug":"/architecture","permalink":"/docs/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/architecture.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"title":"Architecture","sidebar_label":"Architecture","sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"Troubleshooting","permalink":"/docs/troubleshooting"},"next":{"title":"Community","permalink":"/docs/community"}}');var r=i(4848),t=i(8453);const o={title:"Architecture",sidebar_label:"Architecture",sidebar_position:9},d="Architecture",l={},a=[{value:"Poller",id:"poller",level:2},{value:"How Devices are Polled",id:"how-devices-are-polled",level:3},{value:"Processing Polled OSI Model Data",id:"processing-polled-osi-model-data",level:3},{value:"Ingester",id:"ingester",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"architecture",children:"Architecture"})}),"\n",(0,r.jsxs)(n.p,{children:["This page outlines the architecture and components of ",(0,r.jsx)(n.code,{children:"switchmap-ng"})]}),"\n",(0,r.jsx)(n.h2,{id:"poller",children:"Poller"}),"\n",(0,r.jsx)(n.p,{children:"This section explains how polling operates."}),"\n",(0,r.jsx)(n.h3,{id:"how-devices-are-polled",children:"How Devices are Polled"}),"\n",(0,r.jsxs)(n.p,{children:["The following refers to files in the ",(0,r.jsx)(n.code,{children:"switchmap.poller.snmp"})," folder:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Modules supporting all MIBs are imported from ",(0,r.jsx)(n.code,{children:"__init__.py"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"iana_enterprise.py"})," module to determine the manufacturer which\nis then used in collating the data."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["For each device OIDs in the MIBs are polled using ",(0,r.jsx)(n.code,{children:"snmp_info.py"}),". OIDs not supported by the app are ignored."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Some Layer 1 and Layer 2 data may be found using the\n",(0,r.jsx)(n.code,{children:"ifIndex"})," id (some Cisco devices), or that of the spanning\ntree port index. The\n",(0,r.jsx)(n.code,{children:"switchmap/poller/snmp/mib/generic/mib_bridge.py"})," determines\nwhich methodology is used by the device and returns values\nkeyed by ",(0,r.jsx)(n.code,{children:"ifIndex"})," for consistency."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["This results in a ",(0,r.jsx)(n.code,{children:"dict"})," with keys for Layer 1, Layer 2 and Layer 3 information in the ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/OSI_model",children:"OSI model"}),"."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["The Layer 1 and Layer 2 information are keyed by ",(0,r.jsx)(n.code,{children:"ifIndex"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"processing-polled-osi-model-data",children:"Processing Polled OSI Model Data"}),"\n",(0,r.jsxs)(n.p,{children:["The following refers to files in the ",(0,r.jsx)(n.code,{children:"switchmap.poller.update"})," folder."]}),"\n",(0,r.jsxs)(n.p,{children:["Different manufacturers use different MIBs to do the same thing. The\n",(0,r.jsx)(n.code,{children:"device.py"})," module attempts to update the ",(0,r.jsx)(n.code,{children:"dict"})," obtained from polled\ndata to create a uniform format suitable for updating the database."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Iterates through each Layer 1 interface by ",(0,r.jsx)(n.code,{children:"ifIndex"})," number."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Extracts data to be more suitable for updating the database. This includes:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"VLAN (Some manufacturers assign them to the physical\ninterface, others to a virtual subinterface.)"}),"\n",(0,r.jsx)(n.li,{children:"Duplex"}),"\n",(0,r.jsx)(n.li,{children:"Speed"}),"\n",(0,r.jsx)(n.li,{children:"Trunk status"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"This data is then posted to the API in JSON format."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"ingester",children:"Ingester"}),"\n",(0,r.jsx)(n.p,{children:"This section explains how database updates operate."}),"\n",(0,r.jsx)(n.p,{children:"The posted polled data is stored on disk on the API server in YAML\nformat for ease of human readability. The ingester reads the datafiles\nand processes them like this:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Network devices in the same routing or VLAN domain will often\nobserve the same information such as IP and MAC addresses."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The ingester processes these and deduplicates the information before adding it to the database. This information is often needed before processing the interface information to help cross referencing."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"All IP address, MAC address and VLAN data in a particular\nZone in the configuration file are processed first."}),"\n",(0,r.jsx)(n.li,{children:"The remaining information is then processed linking to the\nIP address, MAC address and VLAN database foreign keys\npreviously created."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The update is done using the Python multiprocessing module for\nspeed."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>d});var s=i(6540);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);